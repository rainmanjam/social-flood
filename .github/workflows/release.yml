name: Create Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Get current version
        id: current-version
        run: |
          VERSION=$(python -c "from app.__version__ import __version__; print(__version__)")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Increment version
        run: |
          python scripts/increment_version.py patch

      - name: Get new version
        id: new-version
        run: |
          VERSION=$(python -c "from app.__version__ import __version__; print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app/__version__.py
          git commit -m "chore: bump version to v${{ steps.new-version.outputs.version }}" || echo "No changes to commit"

      - name: Push version bump
        run: |
          git push origin main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/social-flood
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.new-version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign Docker images
        run: |
          # Sign Docker Hub image
          cosign sign --yes ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}
          cosign sign --yes ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:latest
          
          # Sign GitHub Container Registry image
          cosign sign --yes ghcr.io/${{ github.repository }}:${{ steps.new-version.outputs.version }}
          cosign sign --yes ghcr.io/${{ github.repository }}:latest

      - name: Generate SBOM
        uses: anchore/sbom-action/download-syft@v0.14.3
        id: syft

      - name: Create SBOM attestation
        run: |
          # Generate SBOM for Docker Hub image
          ${{ steps.syft.outputs.cmd }} ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }} -o spdx-json > sbom-dockerhub.json
          cosign attest --predicate sbom-dockerhub.json --type spdx ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}
          
          # Generate SBOM for GitHub Container Registry image
          ${{ steps.syft.outputs.cmd }} ghcr.io/${{ github.repository }}:${{ steps.new-version.outputs.version }} -o spdx-json > sbom-ghcr.json
          cosign attest --predicate sbom-ghcr.json --type spdx ghcr.io/${{ github.repository }}:${{ steps.new-version.outputs.version }}

      - name: Check if release exists
        id: release-check
        run: |
          if gh release view "v${{ steps.new-version.outputs.version }}" --repo ${{ github.repository }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.new-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.new-version.outputs.version }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        if: steps.release-check.outputs.exists == 'false'
        id: release-notes
        run: |
          # Get recent commits for this release
          COMMITS=$(git log --oneline -10 --pretty=format:"- %s" 2>/dev/null || echo "- Various improvements and updates")

          # Generate comprehensive release notes
          RELEASE_NOTES="## üöÄ Release v${{ steps.new-version.outputs.version }}

          **Automatic Release**: Created from push to main branch
          **Triggered by**: ${{ github.actor }}

          ### üìã What's Changed

          This release includes the following recent changes:

          $COMMITS

          ### üê≥ Deployment

          - **Docker Hub**: \`${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}\`
          - **Latest Tag**: \`${{ secrets.DOCKERHUB_USERNAME }}/social-flood:latest\`
          - **GitHub Packages**: \`ghcr.io/${{ github.repository }}:${{ steps.new-version.outputs.version }}\`
          - **Container Signing**: ‚úÖ Signed with [cosign](https://github.com/sigstore/cosign) for supply chain security

          ### üîí Security Features

          - **SBOM**: Software Bill of Materials attached for vulnerability scanning
          - **Provenance**: Cryptographic attestation of build process included
          - **Container Signing**: All images are cryptographically signed

          ### üì¶ Installation

          \`\`\`bash
          # From Docker Hub
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:latest

          # From GitHub Packages
          docker pull ghcr.io/${{ github.repository }}:${{ steps.new-version.outputs.version }}
          docker pull ghcr.io/${{ github.repository }}:latest
          \`\`\`

          ### üîç Verification

          Verify the container signatures:
          \`\`\`bash
          # Docker Hub
          cosign verify ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}
          cosign verify ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:latest

          # GitHub Packages
          cosign verify ghcr.io/${{ github.repository }}:${{ steps.new-version.outputs.version }}
          cosign verify ghcr.io/${{ github.repository }}:latest
          \`\`\`

          ---

          *This release was automatically created when code was pushed to the main branch.*"

          # Escape newlines for GitHub output
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        if: steps.release-check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new-version.outputs.version }}
          name: Release v${{ steps.new-version.outputs.version }}
          body: ${{ steps.release-notes.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}