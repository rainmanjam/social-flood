name: Create Release

on:
  pull_request:
    types: [ closed ]
    branches: [ main ]

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Get current version
        id: current-version
        run: |
          VERSION=$(python -c "from app.__version__ import __version__; print(__version__)")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Increment version
        run: |
          python scripts/increment_version.py patch

      - name: Get new version
        id: new-version
        run: |
          VERSION=$(python -c "from app.__version__ import __version__; print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app/__version__.py
          git commit -m "chore: bump version to v${{ steps.new-version.outputs.version }}" || echo "No changes to commit"

      - name: Push version bump
        run: |
          git push origin main

      - name: Check if release exists
        id: release-check
        run: |
          if gh release view "v${{ steps.new-version.outputs.version }}" --repo ${{ github.repository }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.new-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.new-version.outputs.version }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        if: steps.release-check.outputs.exists == 'false'
        id: release-notes
        run: |
          # Get PR information
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          echo "PR #$PR_NUMBER: $PR_TITLE by @$PR_AUTHOR"

          # Get commits from this PR
          COMMITS=$(gh pr view $PR_NUMBER --json commits --jq '.commits[].messageHeadline' 2>/dev/null || echo "Various improvements")

          # Generate comprehensive release notes
          RELEASE_NOTES="## üöÄ Release v${{ steps.new-version.outputs.version }}

          **Merged from PR #$PR_NUMBER**: $PR_TITLE
          **Author**: @$PR_AUTHOR

          ### üìã What's Changed

          This release includes the following changes:

          $COMMITS

          ### üê≥ Deployment

          - **Docker Image**: \`${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}\`
          - **Latest Tag**: \`${{ secrets.DOCKERHUB_USERNAME }}/social-flood:latest\`
          - **Container Signing**: ‚úÖ Signed with [cosign](https://github.com/sigstore/cosign) for supply chain security

          ### üîí Security Features

          - **SBOM**: Software Bill of Materials attached for vulnerability scanning
          - **Provenance**: Cryptographic attestation of build process included
          - **Container Signing**: All images are cryptographically signed

          ### üì¶ Installation

          \`\`\`bash
          # Pull the latest signed image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}

          # Or use the latest tag
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:latest
          \`\`\`

          ### üîç Verification

          Verify the container signature:
          \`\`\`bash
          cosign verify ${{ secrets.DOCKERHUB_USERNAME }}/social-flood:${{ steps.new-version.outputs.version }}
          \`\`\`

          ---

          *This release was automatically created when PR #$PR_NUMBER was merged to main.*"

          # Escape newlines for GitHub output
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        if: steps.release-check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new-version.outputs.version }}
          name: Release v${{ steps.new-version.outputs.version }}
          body: ${{ steps.release-notes.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}